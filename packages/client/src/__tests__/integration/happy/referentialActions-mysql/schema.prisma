datasource db {
  provider = "mysql"
  url      = env("TEST_MYSQL_URI")
}

generator client {
  provider = "prisma-client-js"
}

// Defaults

model DefaultsParent {
  id                Int                      @id @default(autoincrement())
  name              String                   @unique
  mandatoryChildren DefaultsMandatoryChild[]
  // optionalChild     DefaultsOptionalChild?
}

model DefaultsMandatoryChild {
  id       Int            @id @default(autoincrement())
  name     String         @unique
  parent   DefaultsParent @relation(fields: [parentId], references: [id]) // implicit: onDelete: Restrict, onUpdate: Cascade - per https://www.prisma.io/docs/concepts/components/prisma-schema/relations/referential-actions#referential-action-defaults
  parentId Int
}

// TODO Optional relation
// model DefaultsOptionalChild {
//   id       Int             @id @default(autoincrement())
//   name     String          @unique
//   parent   DefaultsParent? @relation(fields: [parentId], references: [id]) // implicit: onDelete: SetNull, onUpdate: Cascade - per https://www.prisma.io/docs/concepts/components/prisma-schema/relations/referential-actions#referential-action-defaults
//   parentId Int?            @unique
// }

// OnDelete: Cascade

model OnDeleteCascadeParent {
  id                Int                             @id @default(autoincrement())
  name              String                          @unique
  mandatoryChildren OnDeleteCascadeMandatoryChild[]
}

model OnDeleteCascadeMandatoryChild {
  id       Int                   @id @default(autoincrement())
  name     String                @unique
  parent   OnDeleteCascadeParent @relation(fields: [parentId], references: [id], onDelete: Cascade)
  parentId Int
}

// OnDelete: Restrict

model OnDeleteRestrictParent {
  id                Int                              @id @default(autoincrement())
  name              String                           @unique
  mandatoryChildren OnDeleteRestrictMandatoryChild[]
}

model OnDeleteRestrictMandatoryChild {
  id       Int                    @id @default(autoincrement())
  name     String                 @unique
  parent   OnDeleteRestrictParent @relation(fields: [parentId], references: [id], onDelete: Restrict)
  parentId Int
}

// OnDelete: NoAction

model OnDeleteNoActionParent {
  id                Int                              @id @default(autoincrement())
  name              String                           @unique
  mandatoryChildren OnDeleteNoActionMandatoryChild[]
}

model OnDeleteNoActionMandatoryChild {
  id       Int                    @id @default(autoincrement())
  name     String                 @unique
  parent   OnDeleteNoActionParent @relation(fields: [parentId], references: [id], onDelete: NoAction)
  parentId Int
}

// OnDelete: SetNull

model OnDeleteSetNullParent {
  id                Int                             @id @default(autoincrement())
  name              String                          @unique
  mandatoryChildren OnDeleteSetNullMandatoryChild[]
}

model OnDeleteSetNullMandatoryChild {
  id       Int                    @id @default(autoincrement())
  name     String                 @unique
  parent   OnDeleteSetNullParent? @relation(fields: [parentId], references: [id], onDelete: SetNull)
  parentId Int?
  //          ^                 ^
  // Has to be optional so schema can be migrated, as `onDelete` could putt `NULL` there.
}

// OnDelete: SetDefault

model OnDeleteSetDefaultParent {
  id                Int                                @id @default(autoincrement())
  name              String                             @unique
  mandatoryChildren OnDeleteSetDefaultMandatoryChild[]
}

model OnDeleteSetDefaultMandatoryChild {
  id       Int                      @id @default(autoincrement())
  name     String                   @unique
  parent   OnDeleteSetDefaultParent @relation(fields: [parentId], references: [id], onDelete: SetDefault)
  parentId Int                      @default(1)
  //                                    ^
  //                        Needs default so action can trigger
}

// OnUpdate: Cascade
// OnUpdate: Restrict
// OnUpdate: NoAction
// OnUpdate: SetNull
// OnUpdate: SetDefault
